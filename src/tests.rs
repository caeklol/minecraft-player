use anyhow::Error;
use ndarray::Array2;

use crate::algebra;

fn gen_frequency(hz: f32, sample_rate: usize, duration_ms: usize) -> crate::audio::Sound {
    use crate::audio;
    use std::f32::consts::PI;

    let samples_per_tick = (sample_rate * duration_ms) / 1000;
    let samples: Vec<f32> = (0..samples_per_tick)
        .map(|index| {
            let t = index as f32 / sample_rate as f32;
            (2.0 * PI * hz * t).sin()
        })
        .collect();

    audio::Sound { samples, sample_rate }
}

#[test]
fn test_generator() {
    assert_eq!(gen_frequency(300.0, 44100, 50).samples.len(), 2205);
    assert_eq!(gen_frequency(300.0, 48000, 50).samples.len(), 2400);
}

#[test]
fn test_resample() {
    let mut tone = gen_frequency(300.0, 44100, 50);
    tone.resample(48000);
    assert_eq!(tone.samples.len(), 2400);
}

#[test]
fn test_firsttick() {
    let tone = gen_frequency(300.0, 44100, 50);
    let mut binding = tone.clone();
    let first_tick = binding.first_tick();
    assert_eq!(first_tick.samples.len(), tone.samples.len(), "first_tick changed sample length");
    assert_eq!(first_tick.sample_rate, tone.sample_rate, "first_tick changed sample rate");
}

#[test]
fn test_pitch() {
    let mut tone = gen_frequency(300.0, 48000, 50);
    let original = tone.samples.len();

    let resampled_sound = tone.adjust_pitch(0.5);
    assert_eq!(resampled_sound.samples.len(), original * 2);
}

#[test]
fn test_layout() {
    let matrix = vec![
        vec![1.0, 2.0, 3.0],
        vec![4.0, 5.0, 6.0]
    ];
    let matrix_ndarray = algebra::matrix_from_vecs(matrix.clone()).unwrap();
    let flattened: Vec<f32> = matrix.into_iter().flatten().collect();
    let ndarray_vec: Vec<f32> = matrix_ndarray.iter().cloned().collect();
    assert!(flattened.iter().partial_cmp(&ndarray_vec).expect("failed to compare").is_eq());
}

fn nnls_test<T: Fn(Array2<f32>, Array2<f32>) -> Array2<f32>>(f: T) -> Result<Vec<f32>, Error> {
    let chunks = vec![
        vec![-0.81, 0.09, 0.70, -0.81, -0.27, -0.47, 0.88, -0.61, 0.12, 0.48, 0.54, -0.66, 0.80, 0.48, -0.00, -0.87, 0.38, 0.88, -0.28, -0.48],
        vec![-0.63, -0.12, 0.40, -0.66, 0.18, -0.35, -0.74, 0.91, -0.17, 0.37, -0.93, 0.60, -0.87, 0.71, -0.99, -0.72, -0.56, 0.60, -0.53, 0.78],
        vec![-0.15, 0.18, 0.96, -0.41, -0.53, -0.81, 0.95, -0.32, 0.61, -0.22, 0.17, -0.46, 0.87, 0.20, -0.79, -0.66, -0.11, -0.68, 0.25, 0.75],
        vec![-0.41, -0.37, 0.40, -0.97, 0.26, 0.38, 0.66, 0.75, -0.09, -0.83, 0.00, -0.09, 0.95, 0.39, -0.06, -0.23, 0.23, -0.36, 0.95, -0.45],
        vec![0.43, 0.69, 0.06, -0.97, 0.21, 0.38, -0.64, 0.77, 0.67, 0.89, -0.11, 0.85, -0.15, 0.79, 0.36, -0.53, 0.28, 0.74, 0.63, 0.02],
        vec![0.42, -0.61, 0.06, 0.96, 0.86, -0.46, 0.44, -0.63, -0.38, -0.80, 0.97, 0.46, -0.38, 0.67, 0.33, 0.83, 0.17, -0.92, -0.88, 0.42],
        vec![-0.79, -0.72, -0.41, -0.23, 0.33, -0.70, 0.99, 0.20, 0.12, 0.15, -0.60, -0.46, 0.40, 0.33, -0.83, 0.78, 0.44, 0.51, 0.22, 0.20],
        vec![-0.61, -0.08, -0.02, 0.05, -0.33, 0.79, -0.01, -0.98, -0.75, 0.36, 0.74, 0.99, -0.29, -0.46, -0.46, -0.90, 0.65, -0.31, 0.16, -0.93],
        vec![0.14, -0.02, -0.03, -0.01, -0.73, -0.10, 0.80, 0.73, 0.70, -0.76, 0.09, 0.96, 0.14, 0.43, 0.65, -0.25, -0.46, -0.99, -0.84, -0.58],
        vec![-0.09, -0.94, 0.23, -0.63, 0.28, 0.55, 0.30, -0.31, -0.82, 0.63, 0.64, 0.61, -0.85, -0.34, 0.18, 0.28, -0.81, 0.14, 0.10, 0.01],
        vec![0.93, -0.33, 0.29, 0.67, -0.58, -0.42, -0.25, -0.59, 0.30, -0.93, -0.65, 0.62, -0.14, 0.59, 0.39, -0.38, 0.65, 0.83, -0.92, 0.36],
        vec![-0.14, -0.79, -0.69, 0.34, 0.26, -0.76, -0.70, -0.90, -0.05, 0.84, 0.26, -0.18, -0.11, 0.69, -0.25, 0.36, 0.92, -0.40, -0.63, -0.62],
        vec![0.79, -0.16, 0.83, -0.07, 0.84, 0.68, 0.28, -0.90, 0.76, 0.09, 0.81, 0.70, 0.74, -0.88, 0.79, -0.27, 0.10, -0.13, -0.65, -0.39],
        vec![-0.66, -0.02, -0.45, 0.92, -0.15, -0.27, 0.76, 0.61, -0.94, 0.57, -0.14, -0.30, -0.78, 0.35, -0.23, 0.64, -0.35, 0.34, 0.89, 0.61],
        vec![0.23, -0.61, -0.72, 0.69, 0.19, -0.35, -0.28, 0.54, 0.08, -0.67, 0.12, -0.57, -0.80, -0.50, 0.30, 0.93, -0.21, 0.76, -0.04, 0.83],
        vec![0.81, 0.31, 0.63, 0.81, -0.05, -0.93, 0.89, 0.87, 0.66, -0.62, 0.08, -0.24, -0.23, -0.44, 0.72, 0.50, -0.43, 0.85, 0.36, 0.40],
        vec![0.54, -0.19, -0.07, -0.16, -0.09, 0.95, -0.53, 0.63, -0.70, -0.61, 0.75, -0.61, 0.08, 0.22, -0.85, 0.30, -0.09, -0.13, 0.62, 0.85],
        vec![0.19, 0.53, -0.05, -0.37, -0.35, -0.83, -0.46, -0.03, 0.51, 0.11, -0.11, -0.64, -0.65, 0.20, 0.67, 0.05, 0.62, 0.48, -0.32, 0.90],
        vec![-0.91, 0.18, -0.94, 0.76, -0.98, 0.11, -0.67, -0.28, 0.34, 0.17, 0.41, 0.58, -0.20, 0.04, -0.19, -0.29, -0.14, -0.90, -0.81, -0.80],
        vec![0.57, 0.17, 0.55, 0.86, 0.30, -0.99, -0.94, 0.73, 0.60, 0.49, -0.13, -0.19, -0.28, -0.54, -0.75, -0.09, 0.73, -0.42, -0.54, 0.12],
        vec![-0.18, 0.71, 0.07, -0.34, 0.04, -0.22, 0.51, 0.25, 0.82, -0.50, -0.52, -0.27, 0.60, 0.64, -0.17, 0.97, 0.74, -0.59, -0.85, -0.02],
        vec![0.87, 0.06, -0.47, -0.65, -0.12, 0.25, 0.13, -0.57, -0.06, -0.93, 0.57, -0.41, -0.09, -0.32, -0.63, -0.56, -0.44, 0.56, 0.91, 0.90],
        vec![0.78, 0.43, 0.50, 0.00, -0.21, -0.70, -0.86, 0.44, 0.92, 0.63, -0.96, -0.66, -0.79, -0.27, -0.46, 0.05, 0.84, 0.65, 0.26, -0.62],
        vec![0.68, -0.61, 0.60, 0.61, 0.24, 0.41, 0.51, -0.08, 0.09, 0.08, 0.32, 0.25, -0.03, -0.29, 0.11, -0.14, -0.66, 0.12, 0.51, -0.40],
        vec![0.98, 0.39, -0.82, 0.14, -0.68, -0.78, -0.22, 0.26, 0.29, -0.22, -0.90, -0.08, -0.28, -0.33, 0.75, 0.68, 0.28, -0.43, 0.44, 0.60],
        vec![0.32, -0.93, -0.68, 0.47, -0.79, 0.01, -0.33, 0.48, -0.98, -0.43, -0.07, -0.26, 0.49, -0.26, -0.70, 0.36, -0.20, -0.59, -0.50, 0.95],
        vec![-0.15, 0.16, 0.39, 0.50, -0.87, -0.30, 0.59, -0.89, -0.51, -0.64, -0.22, 0.93, -0.45, -0.94, 0.58, 0.94, 0.14, 0.65, -0.92, -0.87],
        vec![0.83, 0.35, 0.91, 0.18, -0.01, -0.77, -0.31, -0.72, 0.44, -0.37, -0.38, -0.10, 0.04, 0.37, 0.90, 0.91, 0.08, -0.03, 0.39, -0.91],
        vec![-0.00, 0.88, 0.01, -0.59, -0.87, -0.31, 0.94, -0.99, 0.04, -0.35, -0.76, -0.86, 0.19, 0.08, -0.67, 0.98, 0.40, -0.54, -0.42, 0.58],
        vec![-0.98, 0.17, -0.02, 0.04, -0.00, 0.17, -0.77, 0.15, -0.46, 0.44, -0.46, -0.78, -0.66, -0.77, -0.24, 0.04, -0.50, -0.47, 0.46, 0.70]
    ];



    let target = vec![
        vec![-0.34, 0.45, -0.30, -0.22, -0.30, -0.65, 0.42, 0.99, 0.68, -0.52, 0.47, 0.67, -0.29, -0.94, -0.84, 0.77, -0.73, -0.28, -0.05, 0.44],
        vec![0.09, -0.48, -0.88, -0.53, 0.56, 0.81, -0.82, 0.69, 0.07, -0.28, -0.50, 0.76, 0.78, -0.48, -0.09, -0.52, 0.07, -0.21, 0.64, -0.30],
        vec![0.75, 0.56, -0.79, 0.75, 0.13, -0.20, -0.28, -0.60, -0.80, -0.42, -0.58, 0.02, 0.31, 0.30, 0.49, -0.67, -0.11, -0.74, 0.03, -0.27]
    ];
    let mut chunks = algebra::matrix_from_vecs(chunks).expect("failed to conv to matrix")
        .reversed_axes();
    let mut target = algebra::matrix_from_vecs(target).expect("failed to conv to matrix")
        .reversed_axes();

    algebra::normalize_to_minus_plus(&mut chunks);
    algebra::normalize_to_minus_plus(&mut target);

    let mut approx = f(chunks, target);

    algebra::normalize_to_global(&mut approx);

    return Ok(Vec::from(approx.as_slice().unwrap()));
}

#[test]
fn test_nnls() {
    let approx1 = nnls_test(|target, chunks| algebra::cpu_pgd_nnls(target.view(), chunks.view(), 400, 1e-6)).unwrap();
    let approx2 = nnls_test(|target, chunks| algebra::pgd_nnls(target.view(), chunks.view(), 400, 1e-6)).unwrap();

    let max_err = approx1.iter()
        .zip(&approx2)
        .map(|(v1, v2)| v2-v1)
        .fold(f32::NEG_INFINITY, f32::max);

    assert!(max_err < 0.000001, "GPU NNLS != CPU NNLS");
}
